buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'maven-publish'

version = getVersion()
group = "${modGroup}"
archivesBaseName = "${modBaseName}"

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings  channel: "${mcp_channel}", version: "${mcp_mappings}"

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Recommended logging data for a userdev environment
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.disableRefMap', 'true'

            mods {
                multiblockstages {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Recommended logging data for a userdev environment
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.disableRefMap', 'true'

            mods {
                multiblockstages {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Recommended logging data for a userdev environment
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.disableRefMap', 'true'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'multiblockstages', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                multiblockstages {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        name "IE/CraftTweaker"
        url "https://maven.teamacronymcoders.com"
    }
    maven {
        name "GameStages"
        url "https://maven.blamejared.com"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${forgeVersion}"

    implementation fg.deobf("net.darkhax.bookshelf:Bookshelf-Forge-1.18.2:${bookShelfVersion}")
    implementation fg.deobf("net.darkhax.gamestages:GameStages-Forge-1.18.2:${gameStageVersion}")
    implementation fg.deobf("com.blamejared.crafttweaker:CraftTweaker-forge-1.18.2:${crafttweakerVersion}")
    implementation fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:1.18.2-${ieVersion}")
}

jar {
    manifest {
        attributes([
                'Specification-Title': "${title}",
                'Specification-Vendor': "${team}",
                'Specification-Version': "${version}",
                "Implementation-Title": project.name,
                'Implementation-Version': "${modVersion}",
                'Implementation-Vendor' :"${team}",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            url "file://" + (System.getenv("local_maven") != null ? System.getenv("local_maven") : System.getenv("bamboo_local_maven"))
        }
    }
}

String getVersion() {
    String version = modVersion
    String branch = project.hasProperty("branch") ? project.branch : ""

    if(branch != "") {
        version += "-" + branch

        String buildNumber = getBuildNumber()
        if(buildNumber != "") {
            version += "." + buildNumber
        }
    }

    return version
}

static String getBuildNumber() {
    String buildNumber = System.getenv("BUILD_NUMBER") != null ? System.getenv("BUILD_NUMBER") : ""
    if(buildNumber == "") {
        buildNumber = System.getenv("bamboo_buildNumber") != null ? "." + System.getenv("bamboo_buildNumber") : ""
    }
    return buildNumber
}
